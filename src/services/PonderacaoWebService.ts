/**
 * Servi√ßo para calcular pondera√ß√£o de busca externa usando LLM
 */

type Faltante = {
  id?: number;
  query_sugerida?: string;
  nome?: string;
  categoria?: string;
  quantidade?: number;
  custo_beneficio?: any;
  rigor?: any;
  ponderacao_busca_externa?: number;
};

export class PonderacaoWebService {
  /**
   * Adiciona pondera√ß√£o de busca externa para cada faltante usando LLM
   */
  static async ponderarWebLLM(faltantes: Faltante[]): Promise<Faltante[]> {
    if (!faltantes || faltantes.length === 0) {
      return faltantes;
    }

    try {
      console.log(`üß† [PONDERACAO-WEB] Iniciando pondera√ß√£o LLM para ${faltantes.length} faltantes`);

      // Usar Groq para calcular pondera√ß√£o
      const { Groq } = require('groq-sdk');
      const apiKey = process.env.GROQ_API_KEY;
      
      if (!apiKey) {
        console.log('‚ùå [PONDERACAO-WEB] GROQ_API_KEY n√£o encontrada - usando pondera√ß√£o padr√£o');
        return this.ponderacaoPadrao(faltantes);
      }

      const client = new Groq({ apiKey });

      // Processar todos os faltantes em uma √∫nica chamada
      const prompt = `
Analise os itens fornecidos e retorne um objeto JSON com as pondera√ß√µes de busca externa para cada item.

ESCALA DE PONDERA√á√ÉO (0.0 a 1.0):
- 0.0 ‚Üí busca externa imposs√≠vel/invi√°vel (ex.: servi√ßos locais, itens baratos e urgentes).
- 0.1‚Äì0.4 ‚Üí baixa prioridade (somente se n√£o houver op√ß√£o local).
- 0.5‚Äì0.7 ‚Üí m√©dia prioridade (buscar em paralelo com fornecedores locais).
- 0.8‚Äì1.0 ‚Üí alta prioridade (item de nicho, dif√≠cil de encontrar localmente ou com potencial de economia alto).

REGRAS DE INTERPRETA√á√ÉO:
1. Servi√ßos:
   - Se exigem presen√ßa f√≠sica em Angola (instala√ß√£o, manuten√ß√£o, consultoria presencial) ‚Üí 0.0.
   - Se podem ser prestados remotamente (desenvolvimento, SOC as a service, gest√£o de cloud) ‚Üí 0.8‚Äì0.9.

2. Software:
   - Se precisa estar em conformidade com leis/regulamentos locais (ex.: fiscal, RH, contabilidade) ‚Üí 0.1‚Äì0.2.
   - Se exige integra√ß√µes fortes com sistemas locais (bancos, pagamentos, ERP com parceiros locais) ‚Üí 0.3‚Äì0.4.
   - Se √© de prop√≥sito geral e transport√°vel (Microsoft 365, Adobe, cloud gen√©rica) ‚Üí 0.8‚Äì0.9.

3. Hardware:
   - Se valor < 50.000 Kz (cabos, ratos, itens baratos) ‚Üí 0.1.
   - Se √© altamente especializado/nicho (equipamento m√©dico raro, sensores IoT espec√≠ficos) ‚Üí 0.9‚Äì1.0.
   - Caso geral: base 0.5, ajustar e limitar entre 0.0 e 1.0:
     - Pequeno/leve ‚Üí +0.20 ; Grande/pesado ‚Üí ‚àí0.20.
     - Fr√°gil ‚Üí ‚àí0.15.
     - Urgente ‚Üí ‚àí0.40 ; Planeado (>3 meses) ‚Üí +0.20.
     - Sem suporte local ‚Üí ‚àí0.20.
     - Importa√ß√£o com restri√ß√£o/regula√ß√£o ‚Üí ‚àí0.15.

FORMATO DE SA√çDA:
Retorne APENAS um objeto JSON v√°lido no formato:
{
  "ponderacoes": [
    {"id": 1, "ponderacao_busca_externa": 0.75},
    {"id": 2, "ponderacao_busca_externa": 0.25},
    ...
  ]
}

ATEN√á√ÉO:
        - Respeite os nomes dos campos exatamente como est√£o.
        - Retorne somente um JSON v√°lido conforme as instru√ß√µes. Nenhum texto adicional.
        - Todos os valores devem estar entre 0.0 e 1.0, arredondados para duas casas decimais.
`;

      // Preparar lista de itens para an√°lise
      const itensParaAnalise = faltantes.map((faltante, index) => ({
        id: faltante.id || index,
        nome: faltante.nome || 'N/A',
        categoria: faltante.categoria || 'N/A',
        query_sugerida: faltante.query_sugerida || 'N/A',
        quantidade: faltante.quantidade || 'N/A',
        custo_beneficio: faltante.custo_beneficio || {},
      }));

      const itemInfo = `
ITENS PARA AN√ÅLISE:
${JSON.stringify(itensParaAnalise, null, 2)}

Analise cada item e retorne as pondera√ß√µes no formato JSON especificado.
`;

      const resp = await client.chat.completions.create({
        model: "llama-3.1-8b-instant",
        messages: [
          { role: "system", content: prompt },
          { role: "user", content: itemInfo }
        ],
        temperature: 0,
        max_tokens: 2000,
        stream: false
      });

      const content = (resp.choices[0].message.content || '').trim();
      console.log(`üß† [PONDERACAO-WEB] Resposta LLM: ${content.substring(0, 200)}...`);

      // Extrair JSON da resposta
      let ponderacoes: { id: number; ponderacao_busca_externa: number }[] = [];
      try {
        let cleanedContent = content;
        if (!content.startsWith('{')) {
          const jsonMatch = content.match(/\{.*\}/s);
          if (jsonMatch) {
            cleanedContent = jsonMatch[0];
          }
        }
        
        const data = JSON.parse(cleanedContent);
        ponderacoes = data.ponderacoes || [];
        
        console.log(`üß† [PONDERACAO-WEB] Pondera√ß√µes extra√≠das: ${ponderacoes.length} de ${faltantes.length}`);
        
      } catch (e) {
        console.log(`üß† [PONDERACAO-WEB] Erro no parse JSON: ${e} - usando pondera√ß√£o padr√£o`);
        return this.ponderacaoPadrao(faltantes);
      }

      // Aplicar pondera√ß√µes aos faltantes
      const faltantesComPonderacao = faltantes.map((faltante, index) => {
        const ponderacaoItem = ponderacoes.find(p => 
          p.id === faltante.id || p.id === index
        );
        
        let ponderacao = 0.5; // valor padr√£o
        if (ponderacaoItem && 
            typeof ponderacaoItem.ponderacao_busca_externa === 'number' &&
            ponderacaoItem.ponderacao_busca_externa >= 0.0 && 
            ponderacaoItem.ponderacao_busca_externa <= 1.0) {
          ponderacao = Math.round(ponderacaoItem.ponderacao_busca_externa * 100) / 100;
        }

        return {
          ...faltante,
          ponderacao_busca_externa: ponderacao
        };
      });

      console.log(`üß† [PONDERACAO-WEB] Pondera√ß√£o conclu√≠da para ${faltantesComPonderacao.length} faltantes`);
      return faltantesComPonderacao;

    } catch (error) {
      console.error(`‚ùå [PONDERACAO-WEB] Erro no servi√ßo de pondera√ß√£o: ${error}`);
      return this.ponderacaoPadrao(faltantes);
    }
  }

  /**
   * Pondera√ß√£o padr√£o quando LLM n√£o est√° dispon√≠vel
   */
  static ponderacaoPadrao(faltantes: Faltante[]): Faltante[] {
    return faltantes.map(faltante => {
      let ponderacao = 0.5; // valor base

      const nome = (faltante.nome || '').toLowerCase();
      const categoria = (faltante.categoria || '').toLowerCase();
      const query = (faltante.query_sugerida || '').toLowerCase();

      // Regras b√°sicas baseadas em palavras-chave
      if (nome.includes('servi√ßo') || nome.includes('instala√ß√£o') || nome.includes('manuten√ß√£o')) {
        ponderacao = 0.1; // servi√ßos locais
      } else if (nome.includes('software') || nome.includes('licen√ßa') || categoria.includes('software')) {
        ponderacao = 0.7; // software geralmente pode ser internacional
      } else if (nome.includes('cabo') || nome.includes('mouse') || nome.includes('teclado')) {
        ponderacao = 0.2; // itens baratos
      } else if (categoria.includes('especializado') || nome.includes('m√©dico') || nome.includes('industrial')) {
        ponderacao = 0.9; // equipamentos especializados
      }

      return {
        ...faltante,
        ponderacao_busca_externa: Math.round(ponderacao * 100) / 100
      };
    });
  }
}

export default PonderacaoWebService;
