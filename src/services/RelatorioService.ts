import PDFDocument from 'pdfkit';
import fs from 'fs';
import path from 'path';
import CotacoesService from './CotacoesService';
import PromptsService from './PromptsService';
import supabase from '../infra/supabase/connect';

interface RelatorioData {
  cotacaoId: number;
  promptId: number;
  solicitacao: string;
  orcamentoGeral: number;
  itens: Array<{
    nome: string;
    descricao?: string;
    preco: number;
    quantidade: number;
    origem: string;
    llm_relatorio?: any;
  }>;
  queries: Array<{
    queryId: string;
    produtos: Array<{
      nome: string;
      score: number;
      llm_relatorio?: any;
    }>;
  }>;
  relatoriosWeb: Array<{
    timestamp: string;
    produtos_analisados: number;
    produtos_selecionados: number;
    relatorio: any;
  }>;
}

export class RelatorioService {
  /**
   * Verifica se a cota√ß√£o est√° completa e gera relat√≥rio automaticamente
   */
  public async verificarEgerarRelatorio(cotacaoId: number) {
    try {
      // Buscar status atual da cota√ß√£o
      const { data: cotacao, error } = await supabase
        .from('cotacoes')
        .select('status, orcamento_geral')
        .eq('id', cotacaoId)
        .single();

      if (error || !cotacao) {
        console.error('‚ùå [RELATORIO] Erro ao buscar status da cota√ß√£o:', error);
        return;
      }

      // Verificar se est√° completa
      if (cotacao.status === 'completa' && cotacao.orcamento_geral > 0) {
        console.log(`üìä [RELATORIO] Cota√ß√£o ${cotacaoId} est√° completa. Gerando relat√≥rio automaticamente...`);
        
        try {
          const pdfPath = await this.gerarRelatorioCompleto(cotacaoId);
          console.log(`‚úÖ [RELATORIO] Relat√≥rio gerado automaticamente: ${pdfPath}`);
          
          // Atualizar a cota√ß√£o com o caminho do relat√≥rio
          await supabase
            .from('cotacoes')
            .update({ 
              relatorio_path: pdfPath,
              relatorio_gerado_em: new Date().toISOString()
            })
            .eq('id', cotacaoId);
            
          console.log(`üìã [RELATORIO] Caminho do relat√≥rio salvo na cota√ß√£o ${cotacaoId}`);
          
        } catch (relatorioError) {
          console.error('‚ùå [RELATORIO] Erro ao gerar relat√≥rio autom√°tico:', relatorioError);
        }
      } else {
        console.log(`‚ÑπÔ∏è [RELATORIO] Cota√ß√£o ${cotacaoId} n√£o est√° pronta para relat√≥rio (status: ${cotacao.status}, or√ßamento: ${cotacao.orcamento_geral})`);
      }
      
    } catch (error) {
      console.error('‚ùå [RELATORIO] Erro ao verificar status para relat√≥rio:', error);
    }
  }




  /**
   * Gera relat√≥rio completo em PDF para uma cota√ß√£o
   */
  async gerarRelatorioCompleto(cotacaoId: number): Promise<string> {
    try {
      console.log(`üìä [RELATORIO] Iniciando gera√ß√£o de relat√≥rio para cota√ß√£o ${cotacaoId}`);
      
      // Buscar dados da cota√ß√£o
      console.log(`üìä [RELATORIO] Buscando dados da cota√ß√£o...`);
      const cotacao = await CotacoesService.getById(cotacaoId);
      if (!cotacao) {
        throw new Error(`Cota√ß√£o ${cotacaoId} n√£o encontrada`);
      }
      console.log(`‚úÖ [RELATORIO] Cota√ß√£o encontrada: ID ${cotacao.id}, status ${cotacao.status}`);
      
      // Buscar relat√≥rios web se dispon√≠veis
      const relatoriosWeb = Array.isArray(cotacao.relatorios_web) ? cotacao.relatorios_web : [];
      console.log(`üìä [RELATORIO] ${relatoriosWeb.length} relat√≥rios de busca web encontrados`);

      // Buscar prompt
      console.log(`üìä [RELATORIO] Buscando prompt relacionado...`);
      const prompt = await PromptsService.getById(cotacao.prompt_id);
      if (!prompt) {
        throw new Error(`Prompt ${cotacao.prompt_id} n√£o encontrado`);
      }
      console.log(`‚úÖ [RELATORIO] Prompt encontrado: "${prompt.texto_original.substring(0, 50)}..."`);

      // Buscar itens da cota√ß√£o
      console.log(`üìä [RELATORIO] Buscando itens da cota√ß√£o...`);
      const { data: itens, error } = await supabase
        .from('cotacoes_itens')
        .select('*')
        .eq('cotacao_id', cotacaoId);

      if (error) {
        throw new Error(`Erro ao buscar itens: ${error.message}`);
      }
      console.log(`‚úÖ [RELATORIO] ${itens?.length || 0} itens encontrados`);

      // Mapear corretamente os campos dos itens
      const itensMapeados = (itens || []).map(item => {
        // Debug: mostrar o item completo
        console.log(`üîç [RELATORIO] Item bruto:`, {
          id: item.id,
          item_nome: item.item_nome,
          item_preco: item.item_preco,
          payload: item.payload,
          payload_type: typeof item.payload,
          payload_keys: item.payload ? Object.keys(item.payload) : null
        });

        // Tentar parse do payload se for string
        let parsedPayload = item.payload;
        if (typeof item.payload === 'string') {
          try {
            parsedPayload = JSON.parse(item.payload);
            console.log(`üîç [RELATORIO] Payload parseado de string:`, parsedPayload);
          } catch (e) {
            console.log(`‚ö†Ô∏è [RELATORIO] Erro ao fazer parse do payload string:`, e);
            parsedPayload = null;
          }
        }

        const mapped = {
          nome: item.item_nome || item.nome || 'Nome n√£o informado',
          descricao: item.item_descricao || item.descricao || 'Descri√ß√£o n√£o informada',
          preco: parseFloat(item.item_preco || item.preco || '0') || 0,
          quantidade: parseInt(item.quantidade || '1') || 1,
          origem: item.origem || 'local',
          llm_relatorio: parsedPayload?.llm_relatorio || null
        };

        // Debug: mostrar o item mapeado
        console.log(`üîç [RELATORIO] Item mapeado:`, {
          nome: mapped.nome,
          preco: mapped.preco,
          quantidade: mapped.quantidade,
          llm_relatorio: mapped.llm_relatorio,
          llm_relatorio_type: typeof mapped.llm_relatorio
        });

        return mapped;
      });

      console.log(`üìä [RELATORIO] Itens mapeados:`, itensMapeados.map(i => ({ nome: i.nome, preco: i.preco, quantidade: i.quantidade })));

      // Buscar dados das queries (se houver)
      console.log(`üìä [RELATORIO] Buscando dados das queries...`);
      const queries = await this.buscarDadosQueries(cotacaoId);
      console.log(`‚úÖ [RELATORIO] ${queries.length} queries encontradas`);

      const relatorioData: RelatorioData = {
        cotacaoId,
        promptId: cotacao.prompt_id,
        solicitacao: prompt.texto_original,
        orcamentoGeral: cotacao.orcamento_geral || 0,
        itens: itensMapeados,
        queries,
        relatoriosWeb
      };

      console.log(`üìä [RELATORIO] Dados preparados:`);
      console.log(`   - Cota√ß√£o ID: ${relatorioData.cotacaoId}`);
      console.log(`   - Prompt ID: ${relatorioData.promptId}`);
      console.log(`   - Solicita√ß√£o: ${relatorioData.solicitacao.substring(0, 100)}...`);
      console.log(`   - Or√ßamento:AOA$ ${relatorioData.orcamentoGeral}`);
      console.log(`   - Itens: ${relatorioData.itens.length}`);
      console.log(`   - Queries: ${relatorioData.queries.length}`);
      console.log(`   - Relat√≥rios Web: ${relatorioData.relatoriosWeb.length}`);
      console.log(`üìä [RELATORIO] Iniciando gera√ß√£o do PDF...`);
      
      // Gerar PDF
      const pdfPath = await this.gerarPDF(relatorioData);
      console.log(`üéâ [RELATORIO] Relat√≥rio gerado com sucesso: ${pdfPath}`);
      
      return pdfPath;

    } catch (error) {
      console.error('‚ùå [RELATORIO] Erro ao gerar relat√≥rio:', error);
      
      // Log mais detalhado para debugging
      if (error instanceof Error) {
        console.error('‚ùå [RELATORIO] Stack trace:', error.stack);
      }
      
      throw error;
    }
  }

  /**
   * Busca dados das queries relacionadas √† cota√ß√£o
   */
  private async buscarDadosQueries(cotacaoId: number): Promise<any[]> {
    try {
      // Buscar itens locais que tenham payload com query_id
      const { data: itensLocais, error } = await supabase
        .from('cotacoes_itens')
        .select('*')
        .eq('cotacao_id', cotacaoId)
        .eq('origem', 'local')
        .not('payload', 'is', null);

      if (error || !itensLocais) {
        return [];
      }

      // Agrupar por query_id
      const queriesMap = new Map<string, any[]>();
      
      for (const item of itensLocais) {
        let payload = item.payload as any;
        
        // Tentar parse do payload se for string
        if (typeof item.payload === 'string') {
          try {
            payload = JSON.parse(item.payload);
            console.log(`üîç [RELATORIO] Query payload parseado de string:`, payload);
          } catch (e) {
            console.log(`‚ö†Ô∏è [RELATORIO] Erro ao fazer parse do query payload string:`, e);
            payload = null;
          }
        }
        
        const queryId = payload?.query_id;
        
        // Debug: mostrar o payload de cada item
        console.log(`üîç [RELATORIO] Query item payload:`, {
          item_id: item.id,
          item_nome: item.item_nome,
          payload: payload,
          query_id: queryId,
          score: payload?.score,
          llm_relatorio: payload?.llm_relatorio,
          llm_relatorio_type: typeof payload?.llm_relatorio
        });
        
        if (queryId) {
          if (!queriesMap.has(queryId)) {
            queriesMap.set(queryId, []);
          }
          
          queriesMap.get(queryId)!.push({
            nome: item.item_nome || item.nome || 'Nome n√£o informado',
            score: payload.score || 0,
            llm_relatorio: payload.llm_relatorio
          });
        }
      }

      // Converter para array
      const queries: any[] = [];
      for (const [queryId, produtos] of queriesMap) {
        queries.push({
          queryId,
          produtos: produtos.sort((a, b) => b.score - a.score)
        });
      }

      console.log(`üìä [RELATORIO] Queries encontradas:`, queries.map(q => ({ queryId: q.queryId, produtos: q.produtos.length })));

      return queries;

    } catch (error) {
      console.error('Erro ao buscar dados das queries:', error);
      return [];
    }
  }

  /**
   * Gera o PDF com as duas se√ß√µes solicitadas
   */
  private async gerarPDF(data: RelatorioData): Promise<string> {
    return new Promise((resolve, reject) => {
      try {
        console.log(`üìÑ [RELATORIO] Iniciando gera√ß√£o do PDF para cota√ß√£o ${data.cotacaoId}`);
        
        const doc = new PDFDocument({
          size: 'A4',
          margins: {
            top: 50,
            bottom: 50,
            left: 50,
            right: 50
          }
        });

        const filename = `relatorio_cotacao_${data.cotacaoId}_${Date.now()}.pdf`;
        const outputPath = path.join(process.cwd(), 'temp', filename);
        
        // Criar diret√≥rio temp se n√£o existir
        const tempDir = path.dirname(outputPath);
        if (!fs.existsSync(tempDir)) {
          fs.mkdirSync(tempDir, { recursive: true });
          console.log(`üìÅ [RELATORIO] Diret√≥rio temp criado: ${tempDir}`);
        }

        const stream = fs.createWriteStream(outputPath);
        doc.pipe(stream);

        try {
          // Cabe√ßalho
          console.log(`üìÑ [RELATORIO] Adicionando cabe√ßalho...`);
          this.adicionarCabecalho(doc, data);
        ;
          // Se√ß√£o 1: Proposta Comercial e Email
          console.log(`üìÑ [RELATORIO] Adicionando se√ß√£o de proposta...`);
          this.adicionarSecaoProposta(doc, data);

          // Quebra de p√°gina
          console.log(`üìÑ [RELATORIO] Adicionando nova p√°gina...`);
          doc.addPage();

          // Se√ß√£o 2: An√°lise LLM e Top 5
          console.log(`üìÑ [RELATORIO] Adicionando se√ß√£o de an√°lise LLM...`);
          this.adicionarSecaoAnaliseLLM(doc, data);

          // Se√ß√£o 3: Relat√≥rios de Busca Web (se houver)
          if (data.relatoriosWeb.length > 0) {
            console.log(`üìÑ [RELATORIO] Adicionando se√ß√£o de relat√≥rios web...`);
            doc.addPage();
            this.adicionarSecaoRelatoriosWeb(doc, data);
          }

          // Rodap√©
          console.log(`üìÑ [RELATORIO] Adicionando rodap√©...`);
          this.adicionarRodape(doc);

          console.log(`üìÑ [RELATORIO] Finalizando PDF...`);
          doc.end();

        } catch (contentError) {
          console.error('‚ùå [RELATORIO] Erro ao adicionar conte√∫do ao PDF:', contentError);
          // Tentar finalizar o PDF mesmo com erro de conte√∫do
          try {
            doc.end();
          } catch (finalizeError) {
            console.error('‚ùå [RELATORIO] Erro ao finalizar PDF:', finalizeError);
          }
          reject(contentError);
          return;
        }

        stream.on('finish', () => {
          console.log(`‚úÖ [RELATORIO] PDF gerado com sucesso: ${outputPath}`);
          resolve(outputPath);
        });

        stream.on('error', (error) => {
          console.error('‚ùå [RELATORIO] Erro no stream do PDF:', error);
          reject(error);
        });

      } catch (error) {
        console.error('‚ùå [RELATORIO] Erro geral na gera√ß√£o do PDF:', error);
        reject(error);
      }
    });
  }

  /**
   * Adiciona cabe√ßalho ao documento
   */
  private adicionarCabecalho(doc: PDFKit.PDFDocument, data: RelatorioData) {
    doc
      .fontSize(24)
      .font('Helvetica-Bold')
      .text('RELAT√ìRIO DE COTA√á√ÉO', { align: 'center' })
      .moveDown(0.5);

    doc
      .fontSize(14)
      .font('Helvetica')
      .text(`Cota√ß√£o ID: ${data.cotacaoId}`, { align: 'center' })
      .text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, { align: 'center' })
      .moveDown(1);

    doc
      .fontSize(16)
      .font('Helvetica-Bold')
      .text('Solicita√ß√£o:', { underline: true })
      .moveDown(0.3);

    doc
      .fontSize(12)
      .font('Helvetica')
      .text(data.solicitacao, { width: 500 })
      .moveDown(1);
  }

  /**
   * Adiciona se√ß√£o de proposta comercial e email
   */
  private adicionarSecaoProposta(doc: PDFKit.PDFDocument, data: RelatorioData) {
    doc
      .fontSize(18)
      .font('Helvetica-Bold')
      .text('PROPOSTA COMERCIAL E EMAIL DE RESPOSTA', { underline: true })
      .moveDown(1);

    // Resumo da cota√ß√£o
    doc
      .fontSize(14)
      .font('Helvetica-Bold')
      .text('Resumo da Cota√ß√£o:')
      .moveDown(0.5);

    doc
      .fontSize(12)
      .font('Helvetica')
      .text(`‚Ä¢ Total de itens: ${data.itens.length}`)
      .text(`‚Ä¢ Or√ßamento geral:AOA$ ${data.orcamentoGeral.toFixed(2)}`)
      .text(`‚Ä¢ Status: ${data.itens.length > 0 ? 'Completa' : 'Incompleta'}`)
      .moveDown(1);

    // Lista de itens principais
    if (data.itens.length > 0) {
      doc
        .fontSize(14)
        .font('Helvetica-Bold')
        .text('Itens Inclu√≠dos:')
        .moveDown(0.5);

      data.itens.forEach((item, index) => {
        const preco = item.preco || 0;
        const total = preco * item.quantidade;
        
        doc
          .fontSize(11)
          .font('Helvetica-Bold')
          .text(`${index + 1}. ${item.nome}`)
          .moveDown(0.2);

        doc
          .fontSize(10)
          .font('Helvetica')
          .text(`   Descri√ß√£o: ${item.descricao || 'N√£o informada'}`)
          .text(`   Pre√ßo unit√°rio:AOA$ ${preco.toFixed(2)}`)
          .text(`   Quantidade: ${item.quantidade}`)
          .text(`   Total:AOA$ ${total.toFixed(2)}`)
          .text(`   Origem: ${item.origem}`)
          .moveDown(0.5);

        // Se houver relat√≥rio LLM, mostrar resumo
        if (item.llm_relatorio) {
          const rel = item.llm_relatorio;
          if (rel.escolha_principal && rel.justificativa_escolha) {
            doc
              .fontSize(9)
              .font('Helvetica-Bold')
              .text(`    An√°lise LLM: ${rel.escolha_principal}`)
              .moveDown(0.1);
            
            doc
              .fontSize(8)
              .font('Helvetica')
              .text(`      Justificativa: ${rel.justificativa_escolha}`, { width: 400 })
              .moveDown(0.2);
          }
        }
      });
    }

    // Template de email
    doc
      .fontSize(14)
      .font('Helvetica-Bold')
      .text('Template de Email de Resposta:')
      .moveDown(0.5);

    const emailTemplate = this.gerarTemplateEmail(data);
    
    doc
      .fontSize(10)
      .font('Helvetica')
      .text(emailTemplate, { width: 500 })
      .moveDown(1);
  }

  /**
   * Adiciona se√ß√£o de an√°lise LLM e top 5
   */
  private adicionarSecaoAnaliseLLM(doc: PDFKit.PDFDocument, data: RelatorioData) {
    doc
      .fontSize(18)
      .font('Helvetica-Bold')
      .text('AN√ÅLISE LLM - TOP 5 PRODUTOS POR PESQUISA', { underline: true })
      .moveDown(1);

    if (data.queries.length === 0) {
      doc
        .fontSize(12)
        .font('Helvetica')
        .text('Nenhuma an√°lise LLM dispon√≠vel para esta cota√ß√£o.')
        .moveDown(1);
      return;
    }

    // Para cada query, mostrar top 5
    data.queries.forEach((query, queryIndex) => {
      doc
        .fontSize(16)
        .font('Helvetica-Bold')
        .text(`Pesquisa ${queryIndex + 1}: ${query.queryId}`, { underline: true })
        .moveDown(0.5);

              // Relat√≥rio LLM se dispon√≠vel
        if (query.produtos.length > 0 && query.produtos[0]?.llm_relatorio) {
          const rel = query.produtos[0]!.llm_relatorio;
        
        // Mostrar escolha principal
        if (rel.escolha_principal) {
          doc
            .fontSize(14)
            .font('Helvetica-Bold')
            .text('ESCOLHA PRINCIPAL:', { underline: true })
            .moveDown(0.3);

          doc
            .fontSize(12)
            .font('Helvetica-Bold')
            .text(rel.escolha_principal)
            .moveDown(0.2);

          if (rel.justificativa_escolha) {
            doc
              .fontSize(11)
              .font('Helvetica-Bold')
              .text('Justificativa da Escolha:')
              .moveDown(0.2);

            doc
              .fontSize(10)
              .font('Helvetica')
              .text(rel.justificativa_escolha, { width: 450 })
              .moveDown(0.3);
          }
        }

        // Mostrar ranking completo top 5
        if (rel.top5_ranking && Array.isArray(rel.top5_ranking)) {
          doc
            .fontSize(14)
            .font('Helvetica-Bold')
            .text('RANKING COMPLETO TOP 5:', { underline: true })
            .moveDown(0.5);

          rel.top5_ranking.forEach((ranking: any, rankIndex: number) => {
            doc
              .fontSize(12)
              .font('Helvetica-Bold')
              .text(`${ranking.posicao}¬∫ LUGAR: ${ranking.nome}`)
              .moveDown(0.2);

            doc
              .fontSize(11)
              .font('Helvetica')
              .text(`Score Estimado: ${(ranking.score_estimado * 100).toFixed(1)}%`)
              .moveDown(0.2);

            if (ranking.justificativa) {
              doc
                .fontSize(10)
                .font('Helvetica-Bold')
                .text('Justificativa:')
                .moveDown(0.1);

              doc
                .fontSize(9)
                .font('Helvetica')
                .text(ranking.justificativa, { width: 430 })
                .moveDown(0.2);
            }
            if (ranking.id) {
              doc
                .fontSize(10)
                .font('Helvetica-Bold')
                .text(`ID: ${ranking.id}`)
                .moveDown(0.2);
            }

            if (ranking.pontos_fortes && Array.isArray(ranking.pontos_fortes)) {
              doc
                .fontSize(10)
                .font('Helvetica-Bold')
                .text('Pontos Fortes:')
                .moveDown(0.1);

              ranking.pontos_fortes.forEach((ponto: string) => {
                doc
                  .fontSize(9)
                  .font('Helvetica')
                  .text(`‚Ä¢ ${ponto}`, { width: 430 });
              });
              doc.moveDown(0.2);
            }

            if (ranking.pontos_fracos && Array.isArray(ranking.pontos_fracos)) {
              doc
                .fontSize(10)
                .font('Helvetica-Bold')
                .text('Pontos Fracos:')
                .moveDown(0.1);

              ranking.pontos_fracos.forEach((ponto: string) => {
                doc
                  .fontSize(9)
                  .font('Helvetica')
                  .text(`‚Ä¢ ${ponto}`, { width: 430 });
              });
              doc.moveDown(0.2);
            }
            if (ranking.preco) {
              doc
                .fontSize(10)
                .font('Helvetica-Bold')
                .text('Pre√ßo: AOA$ ' + ranking.preco)
                .moveDown(0.1);
            }
            doc.moveDown(0.3);
          });
        }

        // Mostrar crit√©rios de avalia√ß√£o
        if (rel.criterios_avaliacao) {
          doc
            .fontSize(14)
            .font('Helvetica-Bold')
            .text(' CRIT√âRIOS DE AVALIA√á√ÉO:', { underline: true })
            .moveDown(0.5);

          const criterios = rel.criterios_avaliacao;
          if (criterios.correspondencia_tipo) {
            doc
              .fontSize(11)
              .font('Helvetica-Bold')
              .text('‚Ä¢ Correspond√™ncia de Tipo:')
              .moveDown(0.1);
            doc
              .fontSize(10)
              .font('Helvetica')
              .text(`  ${criterios.correspondencia_tipo}`, { width: 430 })
              .moveDown(0.2);
          }
          if (criterios.especificacoes) {
            doc
              .fontSize(11)
              .font('Helvetica-Bold')
              .text('‚Ä¢ Especifica√ß√µes:')
              .moveDown(0.1);
            doc
              .fontSize(10)
              .font('Helvetica')
              .text(`  ${criterios.especificacoes}`, { width: 430 })
              .moveDown(0.2);
          }
          if (criterios.custo_beneficio) {
            doc
              .fontSize(11)
              .font('Helvetica-Bold')
              .text('‚Ä¢ Custo-Benef√≠cio:')
              .moveDown(0.1);
            doc
              .fontSize(10)
              .font('Helvetica')
              .text(`  ${criterios.custo_beneficio}`, { width: 430 })
              .moveDown(0.2);
          }
          if (criterios.disponibilidade) {
            doc
              .fontSize(11)
              .font('Helvetica-Bold')
              .text('‚Ä¢ Disponibilidade:')
              .moveDown(0.1);
            doc
              .fontSize(10)
              .font('Helvetica')
              .text(`  ${criterios.disponibilidade}`, { width: 430 })
              .moveDown(0.2);
          }
        }
      } else {
        // Fallback: mostrar produtos da query sem relat√≥rio LLM
        doc
          .fontSize(12)
          .font('Helvetica')
          .text('Relat√≥rio LLM n√£o dispon√≠vel para esta query.')
          .moveDown(0.5);

        // Top 5 produtos
        query.produtos.slice(0, 5).forEach((produto, posicao) => {
          doc
            .fontSize(11)
            .font('Helvetica-Bold')
            .text(`${posicao + 1}¬∫: ${produto.nome}`)
            .moveDown(0.2);

          doc
            .fontSize(10)
            .font('Helvetica')
            .text(`Score: ${(produto.score * 100).toFixed(1)}%`)
            .moveDown(0.3);
        });
      }

      doc.moveDown(1);
    });
  }

  /**
   * Adiciona se√ß√£o de relat√≥rios de busca web
   */
  private adicionarSecaoRelatoriosWeb(doc: PDFKit.PDFDocument, data: RelatorioData) {
    doc
      .fontSize(18)
      .font('Helvetica-Bold')
      .text('RELAT√ìRIOS DE BUSCA WEB', { underline: true })
      .moveDown(1);

    if (data.relatoriosWeb.length === 0) {
      doc
        .fontSize(12)
        .font('Helvetica')
        .text('Nenhum relat√≥rio de busca web dispon√≠vel para esta cota√ß√£o.')
        .moveDown(1);
      return;
    }

    data.relatoriosWeb.forEach((relatorioWeb, index) => {
      doc
        .fontSize(16)
        .font('Helvetica-Bold')
        .text(`Busca Web ${index + 1}`, { underline: true })
        .moveDown(0.5);

      // Informa√ß√µes b√°sicas da busca
      doc
        .fontSize(12)
        .font('Helvetica')
        .text(`Data: ${new Date(relatorioWeb.timestamp).toLocaleString('pt-BR')}`)
        .text(`Produtos analisados: ${relatorioWeb.produtos_analisados}`)
        .text(`Produtos selecionados: ${relatorioWeb.produtos_selecionados}`)
        .moveDown(0.5);

      // Relat√≥rio LLM da busca web
      if (relatorioWeb.relatorio) {
        const rel = relatorioWeb.relatorio;

        // Escolha principal
        if (rel.escolha_principal) {
          doc
            .fontSize(14)
            .font('Helvetica-Bold')
            .text('PRODUTO ESCOLHIDO:', { underline: true })
            .moveDown(0.3);

          doc
            .fontSize(12)
            .font('Helvetica-Bold')
            .text(rel.escolha_principal)
            .moveDown(0.2);

          if (rel.justificativa_escolha) {
            doc
              .fontSize(11)
              .font('Helvetica-Bold')
              .text('Justificativa:')
              .moveDown(0.2);

            doc
              .fontSize(10)
              .font('Helvetica')
              .text(rel.justificativa_escolha, { width: 450 })
              .moveDown(0.3);
          }
        }

        // Top 5 ranking
        if (rel.top5_ranking && Array.isArray(rel.top5_ranking)) {
          doc
            .fontSize(14)
            .font('Helvetica-Bold')
            .text('RANKING TOP 5:', { underline: true })
            .moveDown(0.5);

          rel.top5_ranking.slice(0, 5).forEach((ranking: any) => {
            doc
              .fontSize(12)
              .font('Helvetica-Bold')
              .text(`${ranking.posicao}¬∫ LUGAR: ${ranking.nome}`)
              .moveDown(0.2);

            if (ranking.score_estimado) {
              doc
                .fontSize(11)
                .font('Helvetica')
                .text(`Score: ${(ranking.score_estimado * 100).toFixed(1)}%`)
                .moveDown(0.2);
            }

            if (ranking.preco) {
              doc
                .fontSize(11)
                .font('Helvetica')
                .text(`Pre√ßo: AOA$ ${ranking.preco}`)
                .moveDown(0.2);
            }

            if (ranking.justificativa) {
              doc
                .fontSize(10)
                .font('Helvetica')
                .text(`Justificativa: ${ranking.justificativa}`, { width: 430 })
                .moveDown(0.2);
            }

            if (ranking.url) {
              doc
                .fontSize(10)
                .font('Helvetica-Bold')
                .text(`URL: ${ranking.url}`)
                .moveDown(0.2);
            }


            if (ranking.pontos_fortes && Array.isArray(ranking.pontos_fortes)) {
              doc
                .fontSize(10)
                .font('Helvetica-Bold')
                .text('Pontos Fortes:')
                .moveDown(0.1);

              ranking.pontos_fortes.forEach((ponto: string) => {
                doc
                  .fontSize(9)
                  .font('Helvetica')
                  .text(`‚Ä¢ ${ponto}`, { width: 430 });
              });
              doc.moveDown(0.2);
            }

            if (ranking.pontos_fracos && Array.isArray(ranking.pontos_fracos)) {
              doc
                .fontSize(10)
                .font('Helvetica-Bold')
                .text('Pontos Fracos:')
                .moveDown(0.1);

              ranking.pontos_fracos.forEach((ponto: string) => {
                doc
                  .fontSize(9)
                  .font('Helvetica')
                  .text(`‚Ä¢ ${ponto}`, { width: 430 });
              });
              doc.moveDown(0.2);
            }

            doc.moveDown(0.3);
          });
        }

        // Crit√©rios de avalia√ß√£o
        if (rel.criterios_avaliacao) {
          doc
            .fontSize(14)
            .font('Helvetica-Bold')
            .text('CRIT√âRIOS DE AVALIA√á√ÉO:', { underline: true })
            .moveDown(0.5);

          const criterios = rel.criterios_avaliacao;
          Object.entries(criterios).forEach(([key, value]) => {
            if (value && typeof value === 'string') {
              doc
                .fontSize(11)
                .font('Helvetica-Bold')
                .text(`‚Ä¢ ${key.replace(/_/g, ' ').toUpperCase()}:`)
                .moveDown(0.1);
              doc
                .fontSize(10)
                .font('Helvetica')
                .text(`  ${value}`, { width: 430 })
                .moveDown(0.2);
            }
          });
        }

        // Erro se houver
        if (rel.erro) {
          doc
            .fontSize(12)
            .font('Helvetica-Bold')
            .text('ERRO NA AN√ÅLISE:', { underline: true })
            .moveDown(0.3);

          doc
            .fontSize(11)
            .font('Helvetica')
            .text(rel.erro, { width: 450 })
            .moveDown(0.3);
        }
      }

      doc.moveDown(1);
    });
  }

  /**
   * Adiciona rodap√© ao documento
   */
  private adicionarRodape(doc: PDFKit.PDFDocument) {
    try {
      const pageRange = doc.bufferedPageRange();
      if (!pageRange || pageRange.count === 0) {
        console.log('‚ö†Ô∏è [RELATORIO] Nenhuma p√°gina para adicionar rodap√©');
        return;
      }
      
      const pageCount = pageRange.count;
      const startPage = pageRange.start;
      
      console.log(`üìÑ [RELATORIO] Adicionando rodap√© em ${pageCount} p√°ginas (${startPage} a ${startPage + pageCount - 1})`);
      
      for (let i = 0; i < pageCount; i++) {
        const pageIndex = startPage + i;
        doc.switchToPage(pageIndex);
        
        doc
          .fontSize(10)
          .font('Helvetica')
          .text(
            `P√°gina ${i + 1} de ${pageCount}`,
            doc.page.margins.left,
            doc.page.height - doc.page.margins.bottom - 20,
            { align: 'center' }
          );
      }
    } catch (error) {
      console.error('‚ùå [RELATORIO] Erro ao adicionar rodap√©:', error);
      // N√£o falhar a gera√ß√£o do PDF por causa do rodap√©
    }
  }

  /**
   * Gera template de email baseado nos dados da cota√ß√£o
   */
  private gerarTemplateEmail(data: RelatorioData): string {
    const dataAtual = new Date().toLocaleDateString('pt-BR');
    
    return `Prezado Cliente,

Espero que esteja bem. Conforme solicitado, segue nossa proposta comercial para a aquisi√ß√£o dos produtos de T.I.

SOLICITA√á√ÉO:
${data.solicitacao}

RESUMO DA PROPOSTA:
‚Ä¢ Total de itens: ${data.itens.length}
‚Ä¢ Or√ßamento geral:AOA$ ${data.orcamentoGeral.toFixed(2)}
‚Ä¢ Prazo de entrega: A combinar
‚Ä¢ Forma de pagamento: A combinar

ITENS INCLU√çDOS:
${data.itens.map((item, index) => {
  const preco = item.preco || 0;
  const total = preco * item.quantidade;
  const descricao = item.descricao || 'Descri√ß√£o n√£o informada';
  return `${index + 1}. ${item.nome}
     Descri√ß√£o: ${descricao}
     Pre√ßo unit√°rio:AOA$ ${preco.toFixed(2)}
     Quantidade: ${item.quantidade}
     Total:AOA$ ${total.toFixed(2)}`;
}).join('\n\n')}

CONDI√á√ïES COMERCIAIS:
‚Ä¢ Validade da proposta: 30 dias
‚Ä¢ Garantia: Conforme especifica√ß√µes dos fabricantes
‚Ä¢ Suporte t√©cnico: Incluso conforme disponibilidade

Esta proposta foi elaborada com base na an√°lise t√©cnica de nossos especialistas, considerando as melhores op√ß√µes dispon√≠veis no mercado em termos de custo-benef√≠cio e adequa√ß√£o √†s suas necessidades.

Aguardamos seu retorno para esclarecimentos adicionais ou para prosseguirmos com a implementa√ß√£o.

Atenciosamente,
Equipe de Vendas
Data: ${dataAtual}`;
  }

}

export default new RelatorioService();
