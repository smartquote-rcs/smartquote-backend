import * as XLSX from 'xlsx';

// Ler o arquivo baixado diretamente da rota
const workbook = XLSX.readFile('temp/teste_direto_rota.xlsx');

console.log('üìã [ROTA] Abas encontradas:', workbook.SheetNames);

// Verificar aba de Itens especificamente
if (workbook.SheetNames.includes('Itens')) {
  console.log('\nüì¶ [ITENS] Dados da aba Itens (da rota HTTP):');
  const itensSheet = workbook.Sheets['Itens'];
  
  if (itensSheet) {
    // Converter para JSON para visualiza√ß√£o mais clara
    const jsonData = XLSX.utils.sheet_to_json(itensSheet, { 
      header: 1,
      defval: '' // Usa string vazia para c√©lulas vazias
    });
    
    console.log('üìä [DADOS] Conte√∫do completo da aba Itens:');
    jsonData.forEach((row, index) => {
      console.log(`Linha ${index + 1}:`, row);
    });
    
    // Verificar se h√° dados ap√≥s o cabe√ßalho
    const dadosItens = jsonData.slice(3); // Pular t√≠tulo, linha vazia e cabe√ßalho
    console.log(`\nüìà [CONTAGEM] Total de linhas de dados: ${dadosItens.length}`);
    
    // Verificar linha espec√≠fica do item
    if (jsonData.length >= 4) {
      console.log('\nüîç [ITEM] Linha 4 (dados do item):');
      const itemLinha = jsonData[3] as any[];
      console.log('  Nome:', itemLinha[0] || 'VAZIO');
      console.log('  Descri√ß√£o:', itemLinha[1] || 'VAZIO');
      console.log('  Pre√ßo:', itemLinha[2] || 'VAZIO');
      console.log('  Quantidade:', itemLinha[3] || 'VAZIO');
      console.log('  Subtotal:', itemLinha[4] || 'VAZIO');
      console.log('  Origem:', itemLinha[5] || 'VAZIO');
      console.log('  Provider:', itemLinha[6] || 'VAZIO');
    }
  }
} else {
  console.log('‚ùå Aba "Itens" n√£o encontrada nas abas:', workbook.SheetNames);
}
