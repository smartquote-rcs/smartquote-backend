-- ========================================
-- Script para tornar emails case-sensitive no Supabase
-- ========================================

-- 1. Criar uma função para validar emails case-sensitive
CREATE OR REPLACE FUNCTION validate_email_case_sensitive()
RETURNS trigger AS $$
BEGIN
  -- Verificar se já existe um usuário com email case-insensitive diferente
  IF EXISTS (
    SELECT 1 FROM auth.users 
    WHERE LOWER(email) = LOWER(NEW.email) 
    AND email != NEW.email
  ) THEN
    RAISE EXCEPTION 'Email já existe com diferente capitalização. Use: %', 
      (SELECT email FROM auth.users WHERE LOWER(email) = LOWER(NEW.email) LIMIT 1);
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 2. Criar trigger para validar na inserção
DROP TRIGGER IF EXISTS validate_email_case_trigger ON auth.users;
CREATE TRIGGER validate_email_case_trigger
  BEFORE INSERT ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION validate_email_case_sensitive();

-- 3. Criar trigger para validar na atualização  
DROP TRIGGER IF EXISTS validate_email_case_update_trigger ON auth.users;
CREATE TRIGGER validate_email_case_update_trigger
  BEFORE UPDATE ON auth.users
  FOR EACH ROW
  EXECUTE FUNCTION validate_email_case_sensitive();

-- 4. Criar índice único case-sensitive para emails
-- (Isso força que emails sejam exatamente iguais)
CREATE UNIQUE INDEX IF NOT EXISTS unique_email_case_sensitive 
ON auth.users (email);

-- 5. Verificar emails duplicados existentes (apenas para diagnóstico)
SELECT 
  LOWER(email) as email_lower,
  COUNT(*) as count,
  STRING_AGG(email, ', ') as variations
FROM auth.users 
GROUP BY LOWER(email) 
HAVING COUNT(*) > 1;

-- 6. (OPCIONAL) Limpar emails duplicados case-insensitive
-- CUIDADO: Execute apenas se você quer remover duplicatas!
-- DELETE FROM auth.users 
-- WHERE id NOT IN (
--   SELECT DISTINCT ON (LOWER(email)) id 
--   FROM auth.users 
--   ORDER BY LOWER(email), created_at ASC
-- );
