import { NotificationService } from './NotificationService';
import { Notification } from '../models/Notification';
import { CotacaoDTO } from '../models/Cotacao';
import DynamicsIntegrationService from './DynamicsIntegrationService';

export class CotacaoNotificationService {
  private notificationService = new NotificationService();
  private dynamicsService = new DynamicsIntegrationService();

  /**
   * Cria notifica√ß√£o quando uma nova cota√ß√£o √© criada
   */
  async notificarCotacaoCriada(cotacao: CotacaoDTO): Promise<void> {
    const notification: Notification = {
      title: 'Nova Cota√ß√£o Criada',
      subject: `Nova cota√ß√£o criada para ${cotacao.produto?.nome || 'Produto'} (ID: ${cotacao.id})`,
      type: 'cotacao_criada',
      url_redir: `/cotacoes/${cotacao.id}`
    };

    try {
      await this.notificationService.createIfNotExists(notification);
      console.log(`üìã [COTACAO-NOTIF] Notifica√ß√£o criada para nova cota√ß√£o ID: ${cotacao.id}`);
    } catch (error) {
      console.error(`üìã [COTACAO-NOTIF] Erro ao criar notifica√ß√£o para cota√ß√£o ${cotacao.id}:`, error);
    }
  }

  /**
   * Cria notifica√ß√£o quando uma cota√ß√£o √© aprovada
   */
  async notificarCotacaoAprovada(cotacao: CotacaoDTO): Promise<void> {
    const notification: Notification = {
      title: 'Cota√ß√£o Aprovada',
      subject: `Cota√ß√£o aprovada para ${cotacao.produto?.nome || 'Produto'} (ID: ${cotacao.id}) - Motivo: ${cotacao.motivo}`,
      type: 'cotacao_aprovada',
      url_redir: `/cotacoes/${cotacao.id}`
    };

    try {
      await this.notificationService.createIfNotExists(notification);
      console.log(`‚úÖ [COTACAO-NOTIF] Notifica√ß√£o criada para cota√ß√£o aprovada ID: ${cotacao.id}`);
      
      // Integra√ß√£o com Dynamics 365 - enviar dados da cota√ß√£o aprovada
      try {
        console.log(`üîÑ [COTACAO-NOTIF] Enviando cota√ß√£o aprovada para Dynamics 365...`);
        const dynamicsSuccess = await this.dynamicsService.processarCotacaoAprovada(cotacao);
        
        if (dynamicsSuccess) {
          console.log(`üéâ [COTACAO-NOTIF] Cota√ß√£o ${cotacao.id} enviada para Dynamics com sucesso!`);
        } else {
          console.warn(`‚ö†Ô∏è [COTACAO-NOTIF] Falha ao enviar cota√ß√£o ${cotacao.id} para Dynamics (processo continua)`);
        }
      } catch (dynamicsError) {
        console.error(`‚ùå [COTACAO-NOTIF] Erro na integra√ß√£o com Dynamics para cota√ß√£o ${cotacao.id}:`, dynamicsError);
        // N√£o interrompe o fluxo principal, apenas registra o erro
      }
      
    } catch (error) {
      console.error(`üìã [COTACAO-NOTIF] Erro ao criar notifica√ß√£o de aprova√ß√£o para cota√ß√£o ${cotacao.id}:`, error);
    }
  }

  /**
   * Cria notifica√ß√£o quando uma cota√ß√£o √© rejeitada
   */
  async notificarCotacaoRejeitada(cotacao: CotacaoDTO): Promise<void> {
    const notification: Notification = {
      title: 'Cota√ß√£o Rejeitada',
      subject: `Cota√ß√£o rejeitada para ${cotacao.produto?.nome || 'Produto'} (ID: ${cotacao.id}) - Motivo: ${cotacao.motivo}`,
      type: 'cotacao_rejeitada',
      url_redir: `/cotacoes/${cotacao.id}`
    };

    try {
      await this.notificationService.createIfNotExists(notification);
      console.log(`‚ùå [COTACAO-NOTIF] Notifica√ß√£o criada para cota√ß√£o rejeitada ID: ${cotacao.id}`);
    } catch (error) {
      console.error(`üìã [COTACAO-NOTIF] Erro ao criar notifica√ß√£o de rejei√ß√£o para cota√ß√£o ${cotacao.id}:`, error);
    }
  }

  /**
   * Cria notifica√ß√£o quando uma cota√ß√£o √© deletada
   */
  async notificarCotacaoDeletada(cotacao: CotacaoDTO): Promise<void> {
    const notification: Notification = {
      title: 'Cota√ß√£o Deletada',
      subject: `Cota√ß√£o deletada para ${cotacao.produto?.nome || 'Produto'} (ID: ${cotacao.id})`,
      type: 'cotacao_deletada',
      url_redir: `/cotacoes`
    };

    try {
      await this.notificationService.createIfNotExists(notification);
      console.log(`üóëÔ∏è [COTACAO-NOTIF] Notifica√ß√£o criada para cota√ß√£o deletada ID: ${cotacao.id}`);
    } catch (error) {
      console.error(`üìã [COTACAO-NOTIF] Erro ao criar notifica√ß√£o de dele√ß√£o para cota√ß√£o ${cotacao.id}:`, error);
    }
  }

  /**
   * Processa notifica√ß√£o baseada no status da cota√ß√£o
   */
  async processarNotificacaoCotacao(cotacao: CotacaoDTO, acao: 'criada' | 'aprovada' | 'rejeitada' | 'deletada'): Promise<void> {
    switch (acao) {
      case 'criada':
        await this.notificarCotacaoCriada(cotacao);
        break;
      case 'aprovada':
        await this.notificarCotacaoAprovada(cotacao);
        break;
      case 'rejeitada':
        await this.notificarCotacaoRejeitada(cotacao);
        break;
      case 'deletada':
        await this.notificarCotacaoDeletada(cotacao);
        break;
      default:
        console.warn(`üìã [COTACAO-NOTIF] A√ß√£o desconhecida: ${acao}`);
    }
  }

  /**
   * Analisa mudan√ßas na cota√ß√£o e determina que tipo de notifica√ß√£o enviar
   */
  async analisarENotificarMudancas(cotacaoAntiga: CotacaoDTO | null, cotacaoNova: CotacaoDTO): Promise<void> {
    // Se n√£o h√° cota√ß√£o anterior, √© uma cria√ß√£o
    if (!cotacaoAntiga) {
      await this.processarNotificacaoCotacao(cotacaoNova, 'criada');
      return;
    }

    // Verificar se houve mudan√ßa no status de aprova√ß√£o
    if (cotacaoAntiga.aprovacao !== cotacaoNova.aprovacao) {
      if (cotacaoNova.aprovacao) {
        await this.processarNotificacaoCotacao(cotacaoNova, 'aprovada');
      } else {
        await this.processarNotificacaoCotacao(cotacaoNova, 'rejeitada');
      }
    }
  }

  /**
   * Remove notifica√ß√µes relacionadas a uma cota√ß√£o espec√≠fica
   */
  async removerNotificacoesCotacao(cotacaoId: number): Promise<void> {
    try {
      const todasNotificacoes = await this.notificationService.getAll();
      const notificacoesCotacao = todasNotificacoes.filter(notif => 
        notif.type.startsWith('cotacao_') && 
        (notif.subject.includes(`(ID: ${cotacaoId})`) || notif.url_redir?.includes(`/cotacoes/${cotacaoId}`))
      );

      for (const notificacao of notificacoesCotacao) {
        await this.notificationService.delete(notificacao.id);
        console.log(`üßπ [COTACAO-NOTIF] Notifica√ß√£o removida: ${notificacao.subject}`);
      }
    } catch (error) {
      console.error(`üìã [COTACAO-NOTIF] Erro ao remover notifica√ß√µes da cota√ß√£o ${cotacaoId}:`, error);
    }
  }
}

export default new CotacaoNotificationService();
